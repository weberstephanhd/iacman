#!/bin/bash -e

SCRIPT_DIR=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
source "$SCRIPT_DIR/../lib/iacman"

###########################################################################
# commands
###########################################################################

CMD_colors()
{
  color_red     "***   red   ***"
  color_yellow  "***  yellow ***"
  color_green   "***   green ***"
  color_blue    "***   blue  ***"
  color_magenta "*** magenta ***"
  color_cyan    "***   cyan  ***"
  color_dark    "***   dark  ***"
  color_light   "***  light  ***"
  found         "***  normal ***"
  bold          "***   bold  ***"
}

########################
# lib
CMD_lib()
{
  echo "$(dirname "$SCRIPT_DIR")/lib/boshman"
}

########################
# ls
CMD_ls()
{
  if [ -z "$1" ]; then
    setupEnv
    scan -p "$LROOT"
  else
    cd "$1"
    setupEnv
    if [ -n "$CROOT" ]; then
      found "component $CNAME"
    fi
    if [ -n "$DROOT" ]; then
      if [ -f "$DROOT/$FILE_DEPLOYMENT" ]; then
        found "deployment definition for $DNAME"
      else
        found "deployment config for $DNAME"
      fi
    fi
    if [ -n "$MROOT" ]; then
      if [ -z "$MNAME" ]; then
        found "landscape root"
      else
        found "module $MNAME"
      fi
      if [ -z "$CROOT" -a -z "$DROOT" ]; then
        scan -p "$MROOT"
      fi
    fi
  fi
}

########################
# show

# $1: name
# $2: key
# $3: title
# [$4]: filter command
_showHashedList()
{
  local a=( )
  _get_array a "$1" "$2" || true
  if [ ${#a[@]} -gt 0 ]; then
    title "  ${3}:"
    for i in "${a[@]}"; do
      if [ -n "$4" ]; then
        found "  - $($4 "$i")"
      else
        found "  - $i"
      fi
    done
  fi
}

showDeployment()
{
  local i
  local a=( )
  local p="${deplDefs[$1]}"
  if [ -z "$p" ]; then
    Error "deployment $1 not found"
  fi
  if [ -f "$p/$FILE_DEPLOYMENT" ]; then
    confirm "deployment definition $1"
  else
    confirm "deployment configuration $1"
  fi
  found "  path: $(norm_path "$p")"
  if [ ! ${deplActive[$1]:+set} ]; then
    color_red "  INACTIVE"
  fi

  _showHashedList "$1" deplDCtxs "descriptor context"
  _showHashedList "$1" deplDStubs "descriptor stubs" norm_path

  local c="${deplComps[$1]}"
  if [ -z "$c" ]; then
    warn "no component declared"
  else
    p="${compDefs[$c]}"
    if [ -z "$p" ]; then
      warn "  component: $c (undefined)"
    else
      found "  component: $c ($(norm_path "$p"))"
    fi

    _showHashedList "$c" compCtxs "component context"
  fi

  _showHashedList "$1" deplInfos "configurations" norm_path

  _get_array a "$1" deplReqs || true
  if [ ${#a[@]} -gt 0 ]; then
    title "  requires:"
    for i in "${a[@]}"; do
      p="${deplDefs[$i]}"
      if [ -z "$p" ]; then
        warn "  - $i (undefined)"
      else
        found "  - $i ($(norm_path "$p"))"
      fi
    done
  fi

  _showHashedList "$1" deplCtxs "context"
  _showHashedList "$1" deplStubs "stubs" norm_path
}


showComponent()
{
  local i
  local p="${compDefs[$1]}"
  if [ -z "$p" ]; then
    Error "component $1 not found"
  fi
  confirm "component $1"
  found "  path: $(norm_path "$p")"
  
  _get_array a "$1" compCtxs || true
  if [ ${#a[@]} -gt 0 ]; then
    title "  context:"
    for i in "${a[@]}"; do
      found "  - $i"
    done
  fi

  get_component_deployments "$1" | (
    local f=
    while IFS='' read -r d; do
      if [ -z "$f" ]; then
        title "  deployments"
        f=X
      fi
      found "  - $d ($(norm_path "${deplDefs[$d]}"))"
    done
  )
}

showModule()
{
  local p="${modDefs[$1]}"
  if [ -z "$p" ]; then
    Error "module $1 not found"
  fi
  (
    declare -A modDefs
    declare -A deplDefs
    declare -A compDefs
    #found "module $1"
    #found "  path: $(norm_path "$p")"
    scan -p "$p"
  )
}

CMD_show()
{
  setupEnv
  cacheAll

  if [ $# -eq 0 ]; then
    if [ -n "$CROOT" ]; then
      showComponent "$CNAME"
    fi
    if [ -n "$DROOT" ]; then
      showDeployment "$DNAME"
    fi
    if [ -z "$CROOT" -a -z "$DROOT" -a -n "$MROOT" ]; then
      if [ -z "$MNAME" ]; then
        found "landscape root"
      else
        found "module $MNAME"
      fi
      scan -p "$MROOT"
    fi
  else
    if [ $# -eq 2 ]; then
      local type="$(resolve_shortcut "$1" deployment component module)"
      case "$type" in 
        deployment)
          showDeployment "$2";;
        component)
          showComponent "$2";;
        module)
          showModule "$2";;
        *) Error "illegal element type $1";;
      esac
    else
      local p="${deplDefs[$1]}"
      if [ -n "$p" ]; then
        showDeployment "$1"
      else 
        p="${compDefs[$1]}"
        if [ -n "$p" ]; then
          showComponent "$1"
        else
          p="${modDefs[$1]}"
          if [ -n "$p" ]; then
            showModule "$1"
          else
            Error "no element with name '$1' found"
          fi
        fi
      fi
    fi
  fi
}

########################
# show dependency closure

CMD_closure()
{
  setupEnv
  cacheAll

  local t
  local n
  n="$(require_deplname "$1")"
  t="$(require_deployment "$n")"
  log info "generating dependency closure for $n"

  local a=( )
  if ! _closure a "$n"; then
    list_array __missing dump_err
    return 1
  else
    list_array a
  fi
}

########################
# generate exports

CMD_exports()
{
  setupEnv
  cacheAll

  local t
  local n
  n="$(require_deplname "$1")"
  t="$(require_deployment "$n")"
  mkdir -p "$TMP"
  log info "generating exports for $n"
  generate_exports "$n" "$TMP"
}

########################
# generate manifest

CMD_manifest()
{
  setupEnv
  cacheAll

  local t
  local n
  n="$(require_deplname "$1")"
  t="$(require_deployment "$n")"
  mkdir -p "$TMP"
  log info "generating manifest for $n"
  generate_manifest "$n" "$TMP"
}

########################
# script execution

exec_script()
{
  setupEnv
  cacheAll

  local t
  local n
  local s="$1"
  shift
  n="$(deplname_from_args)"
  t="$(require_deployment "$n")"
  local p="$(get_script "$n" "$DIR_SCRIPTS/$s")"
  if [ -z "$p" ]; then
    Error "${ERRCTX}${ERRCTX:+: }script '$s' not found for '$n'"
  fi
  local inst="$(get_instance_dir "$n")"
  "$p" -d "$inst" "$@"
}

CMD_script()
{
  if [ $# -lt 1 ]; then
    Error "${ERRCTX}${ERRCTX:+: }script name missing"
  fi
  exec_script "$@"
}

CMD_prepare()
{
  exec_script prepare "$@"
}

CMD_plan()
{
  exec_script plan "$@"
}

CMD_deploy()
{
  exec_script deploy "$@"
}

###########################################################################
# link evaluation
###########################################################################

link=$(basename "$0")
if [ "$link" == iac ]; then
  cmd="$1"
  if [ $# -gt 0 ]; then
    shift
  fi
else
  cmd=${link##iac}
fi

###########################################################################
# help
###########################################################################

if [ -z "$cmd" -o "$cmd" == help -o "$cmd" == "--help" -o "$cmd" == "-help" ]; then
  found lsman - landscape management tool
  title "iac [<options>] <command> [<args>]"
  found
  found "Options:"
  found "  -q         quiet"
  found "  -D         debug"
  found "  -d <name>  deployment name"
  found
  found "Commands:"
  found "  ls [<dir>]                                  list landscape/module structure"
  found "  show [[component|deployment|module] <name>] details for dedicated element"
  found "  closure [<name>]                            dependency closure"
  found 
  found "Handle scripts provided by component for deployments:"
  found "  script <name>  <args>         execute arbitrary script for deployment"
  found "  prepare                       execute prepare script"
  found "  manifest                      generate manifest"
  info  "                                context provided by iac and passed as argument"
  info  "                                this script is defaulted by using"
  info  "                                the context as manifest."
  found "  exports                       generate exports"
  info  "                                context provided by iac and passed as argument"
  info  "                                this script is defaulted by generating"
  info  "                                the manifest and reading the exports section."
  found "  plan                          execute plan script"
  found "  deploy                        execute deploy script"
  exit 0
fi

###########################################################################
# main
###########################################################################
declare -g -A opts
declare -g -A params
params=( [q]=quiet [D]=debug [d]="=deployment" )
OPT_parse_options params opts "$@"
shift $(( _cnt - 1 ))

#
# support boshman based scripts by providing path to source boshman
#
if [ ${opts[quiet]+set} ]; then
  QUIET=X
fi
if [ ${opts[debug]+set} ]; then
  DEBUG[$location]=X
fi


CMDS=( show closure exports manifest script ls prepare plan deploy lib colors )
cmd="$(resolve_shortcut "$cmd" "${CMDS[@]}")"

execute_command "$cmd" CMD_ "${CMDS[*]}" "$@"

